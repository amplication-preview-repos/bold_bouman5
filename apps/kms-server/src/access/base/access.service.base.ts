/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Access as PrismaAccess,
  Policy as PrismaPolicy,
} from "@prisma/client";

export class AccessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AccessCountArgs, "select">): Promise<number> {
    return this.prisma.access.count(args);
  }

  async accesses<T extends Prisma.AccessFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessFindManyArgs>
  ): Promise<PrismaAccess[]> {
    return this.prisma.access.findMany<Prisma.AccessFindManyArgs>(args);
  }
  async access<T extends Prisma.AccessFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessFindUniqueArgs>
  ): Promise<PrismaAccess | null> {
    return this.prisma.access.findUnique(args);
  }
  async createAccess<T extends Prisma.AccessCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessCreateArgs>
  ): Promise<PrismaAccess> {
    return this.prisma.access.create<T>(args);
  }
  async updateAccess<T extends Prisma.AccessUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessUpdateArgs>
  ): Promise<PrismaAccess> {
    return this.prisma.access.update<T>(args);
  }
  async deleteAccess<T extends Prisma.AccessDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessDeleteArgs>
  ): Promise<PrismaAccess> {
    return this.prisma.access.delete(args);
  }

  async findPolicies(
    parentId: string,
    args: Prisma.PolicyFindManyArgs
  ): Promise<PrismaPolicy[]> {
    return this.prisma.access
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .policies(args);
  }
}
