/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Access } from "./Access";
import { AccessCountArgs } from "./AccessCountArgs";
import { AccessFindManyArgs } from "./AccessFindManyArgs";
import { AccessFindUniqueArgs } from "./AccessFindUniqueArgs";
import { CreateAccessArgs } from "./CreateAccessArgs";
import { UpdateAccessArgs } from "./UpdateAccessArgs";
import { DeleteAccessArgs } from "./DeleteAccessArgs";
import { PolicyFindManyArgs } from "../../policy/base/PolicyFindManyArgs";
import { Policy } from "../../policy/base/Policy";
import { AccessService } from "../access.service";
@graphql.Resolver(() => Access)
export class AccessResolverBase {
  constructor(protected readonly service: AccessService) {}

  async _accessesMeta(
    @graphql.Args() args: AccessCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Access])
  async accesses(@graphql.Args() args: AccessFindManyArgs): Promise<Access[]> {
    return this.service.accesses(args);
  }

  @graphql.Query(() => Access, { nullable: true })
  async access(
    @graphql.Args() args: AccessFindUniqueArgs
  ): Promise<Access | null> {
    const result = await this.service.access(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Access)
  async createAccess(@graphql.Args() args: CreateAccessArgs): Promise<Access> {
    return await this.service.createAccess({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Access)
  async updateAccess(
    @graphql.Args() args: UpdateAccessArgs
  ): Promise<Access | null> {
    try {
      return await this.service.updateAccess({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Access)
  async deleteAccess(
    @graphql.Args() args: DeleteAccessArgs
  ): Promise<Access | null> {
    try {
      return await this.service.deleteAccess(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Policy], { name: "policies" })
  async findPolicies(
    @graphql.Parent() parent: Access,
    @graphql.Args() args: PolicyFindManyArgs
  ): Promise<Policy[]> {
    const results = await this.service.findPolicies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
